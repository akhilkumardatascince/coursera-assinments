Classification Data Set :

Dataset of diabetes, taken from the hospital Frankfurt, Germany.

#loading data
data = pd.read_csv('C:\\Santhosh\\Data\\diabetes.csv')
data.head(5)

Index Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
0	    6	          148	    72	          35	          0	      33.6     0.627	              50	1
1	    1	           85	    66	          29	          0	      26.6	   0.351	              31	0
2	    8	          183	    64	           0	          0	      23.3	   0.672	              32	1
3	    1	           89	    66	          23	         94	      28.1	   0.167	              21	0
4	    0	          137	    40	          35	        168	      43.1	   2.288	              33	1



Attached final Decison tree Diagram.

Data Set (Diabetes) outcome is person suffering from Diabetes.

Depends on features like - Glucose, BloodPressure, Insulin and so on.

""" required Libraries """

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math as mt
from sklearn.cross_validation import train_test_split
import statsmodels.api as sm
import pydotplus
from sklearn.tree import export_graphviz
import graphviz
import collections
from collections import defaultdict

#loading data
data = pd.read_csv('C:\\Santhosh\\Data\\diabetes.csv')

#dividing dependent and independent
X = data.iloc[:, 0:-1]
Y = data.iloc[:, -1]

#training and Validation data Set
from sklearn.cross_validation import train_test_split
Train_X, Test_X, Train_Y, Test_Y = train_test_split(X,Y, train_size= 0.7)
data.head(5)
data.shape
list(data.columns)

#model Building
from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier()
dtc.fit(Train_X, Train_Y)
dtc.score(Train_X, Train_Y)
dtc.score(Test_X, Test_Y)


#Desicon Tree
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn import tree
from sklearn.datasets import load_wine
from IPython.display import SVG
from graphviz import Source
from IPython.display import display
# load dataset


# class labels
# print dataset description
estimator = DecisionTreeClassifier()
estimator.fit(X, Y)

graph = Source(tree.export_graphviz(estimator, out_file=None
   , feature_names=feature_names, class_names=['0', '1'] 
   , filled = True))
display(SVG(graph.pipe(format='svg')))
